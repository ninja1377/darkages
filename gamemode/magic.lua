magics = {}function magics.holy_light(ply)	umsg.Start("holy_light")	umsg.Entity(ply)	umsg.End()		local damage = Magic["holy_light"].effect[ply.data.magics["holy_light"]]		FinishMagic(ply,"holy_light")		if (ply:GetEyeTrace().Entity:IsPlayer() or ply:GetEyeTrace().Entity:IsNPC()) then				DA_Damage(ply:GetEyeTrace().Entity,ply,damage,"magic")		end		ply:EmitSound("darkages/spell_holylight.wav",100,100)endfunction magics.heal(ply)	local tar = GetPlayerNearPos(ply:GetEyeTrace().HitPos,100)	if (tar != nil and tar:IsValid() and tar:IsPlayer()) then		umsg.Start("heal")	umsg.Entity(ply)	umsg.Entity(tar)	umsg.End()		MagicHeal(ply,tar,"heal")		FinishMagic(ply,"heal")		ply:EmitSound("darkages/spell_heal.wav",100,100)		endendfunction magics.regrow(ply)	local tar = GetPlayerNearPos(ply:GetEyeTrace().HitPos,100)	if (tar != nil and tar:IsValid() and tar:IsPlayer()) then		SetBuff(ply,tar,"regrow")		FinishMagic(ply,"regrow")		ply:EmitSound("darkages/spell_heal.wav",100,100)		endendfunction magics.gheal(ply)	local tar = GetPlayerNearPos(ply:GetEyeTrace().HitPos,100)	if (tar != nil and tar:IsValid() and tar:IsPlayer()) then		umsg.Start("gheal")	umsg.Entity(ply)	umsg.Entity(tar)	umsg.End()		MagicHeal(ply,tar,"gheal")		FinishMagic(ply,"gheal")			ply:EmitSound("darkages/spell_healgreater.wav",100,100)		endendfunction magics.groupheal(ply)	umsg.Start("groupheal")	umsg.Entity(ply)	umsg.End()		for k,target in pairs(ents.FindInSphere(ply:GetPos(),200)) do			if (target:IsPlayer()) then						MagicHeal(ply,target,"groupheal")					end		end		FinishMagic(ply,"groupheal")		ply:EmitSound("darkages/spell_healgroup.wav",100,100)endfunction magics.holy_blast(ply)	umsg.Start("holy_blast")	umsg.Entity(ply)	umsg.End()		local damage = Magic["holy_blast"].effect[ply.data.magics["holy_blast"]]	for k,v in pairs(ents.FindInSphere(ply:GetPos(),100)) do			if (v != ply and v:IsPlayer() or v:IsNPC()) then						DA_Damage(v,ply,damage,"magic")				end		end		FinishMagic(ply,"holy_blast")		ply:EmitSound("darkages/spell_holyblast.wav",100,100)endfunction magics.fire_circle(ply)	umsg.Start("fire_circle")	umsg.Entity(ply)	umsg.End()		local pos = ply:GetPos()	local i = 0	local damage = Magic["fire_circle"].effect[ply.data.magics["fire_circle"]]	timer.Create(math.random(1,10000) .. "fire_circle",1,3,function()			i = i + 1			for k,v in pairs(ents.FindInSphere(pos,100 - i*10)) do					if (v != ply and v:IsPlayer() or v:IsNPC()) then								DA_Damage(v,ply,damage,"magic")						end				end		end)		FinishMagic(ply,"fire_circle")		ply:EmitSound("darkages/spell_holyblast.wav",100,100)endfunction magics.bubble_blast(ply)	local magic = "bubble_blast"	umsg.Start(magic)	umsg.Entity(ply)	umsg.End()	local pos = ply:GetPos() + ply:GetAimVector() * 50	local damage = Magic[magic].effect[ply.data.magics[magic]]	for k,v in pairs(ents.FindInSphere(pos,100)) do			if (v != ply and v:IsPlayer() or v:IsNPC()) then						DA_Damage(v,ply,damage,"magic")				end		end		FinishMagic(ply,magic)		ply:EmitSound("darkages/spell_holyblast.wav",100,100)endfunction FinishMagic(ply,magic)local weapon = ply:GetActiveWeapon()	local cd = Magic[magic].cd[ply.data.magics[magic]]if (weapon.Element == Magic[magic].element) then cd = cd / 1.5 endif (PlayerHasClanUpgrade(ply,"10cd")) then cd = cd * 0.9 endweapon.Cooldowns[magic] = CurTime() + cdfor k,v in pairs(Magic[magic].runes) do		GiveRes(ply,k,-v)	AddToStat(ply,"runes",v)	endumsg.Start("setcd",ply)umsg.String(magic)umsg.Short(cd)umsg.End()	endfunction EnoughRunes(ply,magic)	for k,v in pairs(Magic[magic].runes) do			if (ply.data.inventory[k] == nil or ply.data.inventory[k] < v) then				return false				end		end		return trueendfunction DoMagic(ply,magic)	if (EnoughRunes(ply,magic)) then			if (Magic[magic].cbzone) then					if (ply.data.cbzone > 0) then						magics[magic](ply)						end				else				magics[magic](ply)				end	endendfunction LearnMagic(ply,cmd,args)	local magic = args[1]	local lvl = tonumber(args[2])		if (ply.data.magics == nil) then ply.data.magics = {} end		if (ply.data.inventory.gold > Magic[magic].gold[lvl]) then		ply.data.magics[magic] = lvl	GiveRes(ply,"gold",-Magic[magic].gold[lvl])			endendconcommand.Add("LearnMagic",LearnMagic)function MagicHeal(ply,tar,magic)local amount = Magic[magic].effect[ply.data.magics[magic]] + math.Round(ply.data.skills.intellect / 2)local crit = math.random(1,100)local color = "0,255,0"if (crit < ply.data.skills.intellect) then amount = amount * 2 color = "0,128,0"endGiveXP(ply,"intellect",math.ceil(amount/5))RestoreHealth(tar,amount)umsg.Start("damage",ply)umsg.Entity(tar)umsg.Short(amount)umsg.String(color)umsg.End()endfunction MagicMenu(ply)if (ply.data.spellbar == nil) then ply.data.spellbar = {} endlocal data = {}data.spellbar = ply.data.spellbardata.magics = ply.data.magicsnet.Start("magicmenu")	net.WriteTable(data)net.Send(ply)endhook.Add("ShowTeam","MagicMenu",MagicMenu)function AddToSpellBar(ply,cmd,args)local k = args[1]local staff = ply:GetActiveWeapon()staff.Magic = 1ply.data.spellbar[tostring(table.Count(ply.data.spellbar) + 1)] = kif (staff.Cooldowns == nil) then staff.Cooldowns = {} endstaff.Cooldowns[k] = CurTime()endfunction RemoveFromSpellBar(ply,cmd,args)	local n = tonumber(args[1])	local staff = ply:GetActiveWeapon()		staff.Magic = 1		if (staff.Cooldowns == nil) then staff.Cooldowns = {} end	if (staff.Cooldowns[ply.data.spellbar[args[1]]] != nil) then		staff.Cooldowns[ply.data.spellbar[args[1]]] = nil		end	for i=1,table.Count(ply.data.spellbar) do		if (i == n) then ply.data.spellbar[tostring(i)] = nil end							if (i > n) then			ply.data.spellbar[tostring(i-1)] = ply.data.spellbar[tostring(i)]			ply.data.spellbar[tostring(i)] = nil		end	endendconcommand.Add("AddToSpellBar",AddToSpellBar)concommand.Add("RemoveFromSpellBar",RemoveFromSpellBar)